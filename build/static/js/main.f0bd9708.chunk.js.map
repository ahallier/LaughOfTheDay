{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Img","props","style","display","onClick","handleClick","height","width","src","imgPath","Row","class","configRow","value","path","getConfiguration","picture","configuration","j","push","App","state","pictures","active","imgVal","this","config","slice","setState","indexOfSelectedImg","getConfigLocal","indexOfActiveImg","pathOfSelectedImg","pathOfActiveImg","findIndex","x","e","target","name","options","map","pic","defaultValue","selectedPicture","onChange","handleChange","bind","swapActiveImageWithSelectedImage","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0bd9708.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction Img(props) {\n  return (\n    <div  style={{display: 'inline-block'}}>\n      <img onClick={() => props.handleClick()} style={{ height: '200px', width: '200px' }} src={props.imgPath}/>\n    </div>\n  );\n}\n\nfunction Row(props) {\n  return (\n    <div class=\"row\" style={{height: '200px'}}>\n      <Img handleClick={() => props.handleClick(props.configRow[0].value)} imgPath={props.configRow[0].path}/>\n      <Img handleClick={() => props.handleClick(props.configRow[1].value)} imgPath={props.configRow[1].path}/>\n      <Img handleClick={() => props.handleClick(props.configRow[2].value)} imgPath={props.configRow[2].path}/>\n    </div>\n  );\n}\n\nfunction getConfiguration(picture){\n  const configuration = [];\n  const s3Path = \"https://photo-puzzle-picture.s3.amazonaws.com/\";\n  for (let j = 1; j <= 9; j++) {\n    configuration.push({value: j, path: s3Path+picture+'/'+j+'.png'});\n  }\n  return configuration;\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    let picture = \"numbers\";\n    \n    this.state = {\n      pictures: ['butterfly', 'numbers'],\n      active: null,\n      picture: picture,\n      configuration: getConfiguration(picture),\n    };\n\n  }\n\n  swapActiveImageWithSelectedImage(imgVal) {\n    if (this.state.active === null) {\n      const config = this.state.configuration.slice();\n      this.setState({\n        configuration: config,\n        active: imgVal,\n      });\n    } else {\n      const config = this.state.configuration.slice();\n\n      const indexOfSelectedImg = this.getConfigLocal(imgVal);\n      const indexOfActiveImg = this.getConfigLocal(this.state.active);\n\n      const pathOfSelectedImg = config[indexOfSelectedImg].path;\n      const pathOfActiveImg = config[indexOfActiveImg].path;\n      \n      config[indexOfSelectedImg].path = pathOfActiveImg;\n      config[indexOfActiveImg].path = pathOfSelectedImg;\n\n      this.setState({\n        configuration: config,\n        active: null,\n      });\n    }\n  }\n\n  getConfigLocal(imgVal){\n    return this.state.configuration.findIndex((x) => x.value === imgVal);\n  }\n\n  handleChange(e) {\n    let {name, value} = e.target;\n    this.setState({\n      picture: value,\n      configuration: getConfiguration(value),\n    });\n  }\n\n  render() {\n    const options = this.state.pictures.map(pic => {\n      return (\n        <option value={pic}>{pic}</option>\n      );\n    });\n\n    return (\n      <html>\n        <header class=\"App-header\">\n          <h1>Puzzle It</h1>\n        </header>\n        <body>\n          <div>\n            <select defaultValue={this.state.selectedPicture} onChange={this.handleChange.bind(this)}>\n              {options}\n            </select>\n          </div>     \n          <div class=\"center\">\n            <div class=\"container\" style={{display: 'inline-block'}}>\n              <Row handleClick={(imgVal) => this.swapActiveImageWithSelectedImage(imgVal)} configRow={this.state.configuration.slice(0, 3)}/>\n              <Row handleClick={(imgVal) => this.swapActiveImageWithSelectedImage(imgVal)} configRow={this.state.configuration.slice(3, 6)}/>\n              <Row handleClick={(imgVal) => this.swapActiveImageWithSelectedImage(imgVal)} configRow={this.state.configuration.slice(6, 9)}/>\n            </div>\n          </div>\n        </body>\n      </html>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}